{"version":3,"sources":["utils/layer.ts","component/modal/modal.tsx","src/index.tsx","App.js","reportWebVitals.js","index.js"],"names":["Layer","component","options","layerContainer","layerPromise","doPop","styles","position","top","left","right","bottom","zIndex","touchAction","maskOpacity","this","Object","assign","document","createElement","key","style","render","body","appendChild","Promise","resolve","reject","then","data","destory","params","layerManage","popLayer","contains","unmountComponentAtNode","removeChild","globalLayerStack","length","layer","push","show","pop","layerInstance","splice","findIndex","l","Modal","props","pdfRef","useRef","downLoadPdf","useCallback","html2Canvas","current","allowTaint","canvas","contentWidth","width","contentHeight","height","pageHeight","leftHeight","imgWidth","imgHeight","pageData","toDataURL","PDF","JsPDF","addImage","addPage","save","className","onClick","ref","children","Index","useState","html","setHtml","changeHtml","htmlstr","dangerouslySetInnerHTML","__html","showLayer","config","uploadImgShowBase64","showMenuTooltips","onChange","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f182dccd.chunk.js","sourcesContent":["import { render, unmountComponentAtNode } from 'react-dom'\nimport React from 'react'\n\ninterface LayerOptions {\n    styles?: React.CSSProperties\n    maskOpacity?: number\n}\n\nexport class Layer {\n    private layerContainer: HTMLDivElement\n    public layerPromise?: Promise<any>\n    private doPop?: (params: any) => void\n    private options: LayerOptions = {\n        styles: {\n            position: 'fixed',\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            zIndex: 100,\n            touchAction: 'none',\n        },\n        maskOpacity: 0.5,\n    }\n\n    constructor(component: any, options?: LayerOptions) {\n        this.options = Object.assign({}, this.options, options)\n\n        const layerContainer = document.createElement('div')\n\n        for (let key in this.options.styles) {\n            // tslint:disable\n            ;(layerContainer.style as any)[key] = (this.options.styles as any)[key]\n        }\n\n        render(component, layerContainer)\n\n        this.layerContainer = layerContainer\n    }\n\n    public show() {\n        document.body.appendChild(this.layerContainer)\n\n        this.layerPromise = new Promise((resolve, reject) => {\n            this.doPop = resolve\n        }).then(data => {\n            this.destory()\n\n            return data\n        })\n\n        return this.layerPromise as Promise<any>\n    }\n\n    public pop(params: any) {\n        this.doPop && this.doPop(params)\n    }\n\n    public popSelf(params?: any) {\n        layerManage.popLayer(this, params)\n    }\n\n    public destory() {\n        if (document.body.contains(this.layerContainer)) {\n            unmountComponentAtNode(this.layerContainer)\n            document.body.removeChild(this.layerContainer)\n        }\n    }\n}\n\nclass LayerManage {\n    private globalLayerStack: Layer[] = []\n\n    public get isShow() {\n        return this.globalLayerStack.length > 0\n    }\n\n    public showLayer<T>(layer: Layer): Promise<T> {\n        this.globalLayerStack.push(layer)\n\n        return layer.show()\n    }\n\n    public pop(params?: any) {\n        const layer = this.globalLayerStack.pop()\n        layer && layer.pop(params)\n    }\n\n    public popLayer(layerInstance: Layer, params?: any) {\n        const layer = this.globalLayerStack.splice(\n            this.globalLayerStack.findIndex(l => l === layerInstance),\n            1,\n        )[0]\n        if (layer) {\n            layer.pop(params)\n        }\n    }\n\n    public popAll(params?: any) {\n        while (this.globalLayerStack.length > 0) {\n            this.pop(params)\n        }\n    }\n}\n\nexport const layerManage = new LayerManage()\n\nexport const showLayer = (component: any, options?: LayerOptions) => {\n    return layerManage.showLayer(new Layer(component, options))\n}\n","import React, { useCallback, useRef } from \"react\";\nimport { layerManage } from \"src/utils/layer\";\nimport \"./modal.css\";\nimport html2Canvas from \"html2canvas\";\nimport JsPDF from \"jspdf\";\n\nconst Modal: React.FC = (props) => {\n  const pdfRef = useRef<HTMLDivElement>(null);\n\n  const downLoadPdf = useCallback(() => {\n    html2Canvas(pdfRef.current as HTMLDivElement, {\n      allowTaint: true,\n    }).then(function (canvas) {\n      let contentWidth = canvas.width;\n      let contentHeight = canvas.height;\n      let pageHeight = (contentWidth / 592.28) * 841.89;\n      let leftHeight = contentHeight;\n      let position = 0;\n      let imgWidth = 595.28;\n      let imgHeight = (592.28 / contentWidth) * contentHeight;\n      let pageData = canvas.toDataURL(\"image/jpeg\", 1.0);\n      let PDF = new JsPDF(void 0, \"pt\", \"a4\");\n      if (leftHeight < pageHeight) {\n        PDF.addImage(pageData, \"JPEG\", 0, 0, imgWidth, imgHeight);\n      } else {\n        while (leftHeight > 0) {\n          PDF.addImage(pageData, \"JPEG\", 0, position, imgWidth, imgHeight);\n          leftHeight -= pageHeight;\n          position -= 841.89;\n          if (leftHeight > 0) {\n            PDF.addPage();\n          }\n        }\n      }\n      PDF.save(\"下载.pdf\");\n    });\n  }, []);\n\n  return (\n    <div\n      className=\"mask\"\n      onClick={() => {\n        layerManage.pop();\n      }}\n    >\n      <div className=\"content-container\">\n        <div className=\"down-btn\" onClick={downLoadPdf}>下载PDF</div>\n        <div ref={pdfRef}>{props.children}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default Modal;\n","import { useCallback, useState } from \"react\";\nimport Modal from \"src/component/modal/modal\";\nimport { showLayer } from \"src/utils/layer\";\nimport ReactWEditor from \"wangeditor-for-react\";\nimport \"./index.css\";\n\nconst Index = () => {\n  const [html, setHtml] = useState<string>(\"\");\n\n  const changeHtml = useCallback((htmlstr) => {\n    setHtml(htmlstr);\n  }, []);\n\n  const downLoadPdf = useCallback(() => {\n    showLayer(\n      <Modal>\n        <div\n          dangerouslySetInnerHTML={{\n            __html: html,\n          }}\n        ></div>\n      </Modal>\n    );\n  }, [html]);\n\n  return (\n    <div>\n      <ReactWEditor\n        config={{\n          uploadImgShowBase64: true,\n          showMenuTooltips: true,\n          height: 800,\n        }}\n        onChange={changeHtml}\n      />\n      <div className=\"preview-btn\" onClick={downLoadPdf}>\n        预览\n      </div>\n    </div>\n  );\n};\n\nexport default Index;\n","import Index from \"./src\";\n\nfunction App() {\n  return <Index />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}